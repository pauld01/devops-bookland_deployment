# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Symfony

on:
  push:
    branches: [ "prod" ]
  pull_request:
    branches: [ "prod" ]

permissions:
  contents: read

jobs:
  symfony-tests:
    runs-on: ubuntu-latest
    steps:
    #  To automatically get bug fixes and new Php versions for shivammathur/setup-php,
    # change this to (see https://github.com/shivammathur/setup-php#bookmark-versioning):
    - uses: shivammathur/setup-php@v2
      with:
        php-version: "8.0"
#     - uses: actions/checkout@v3
#     - name: Copy .env.test.local
#       run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"
#     - name: Cache Composer packages
#       id: composer-cache
#       uses: actions/cache@v3
#       with:
#         path: vendor
#         key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
#         restore-keys: |
#           ${{ runner.os }}-php-
    - name: Symfony check
      run: symfony check:requirements
      
    - name: Composer update lock
      run: composer update --lock

    - name: Composer update dependencies
      run: composer update
      
    - name: Composer install dependencies
      run: composer install 
#     - name: Install dependencies
#       uses: php-actions/composer@v6
#       with:
#         php_version: "8.0"
#         version: "2.x"
#     - name: Disable Symfony debug toolbar
#       run: composer remove symfony/debug
        # echo "debug:\n  enabled: false" >> config/packages/dev/debug.yaml

#     - name: Clear cache Composer
#       run: composer clear-cache
#     - name: Create Database
#       run: |
#         mkdir -p data
#         touch data/database.sqlite
#     - name: Execute tests (Unit and Feature tests) via PHPUnit
#       env:
#         DATABASE_URL: sqlite:///%kernel.project_dir%/data/database.sqlite
#       run: vendor/bin/phpunit
